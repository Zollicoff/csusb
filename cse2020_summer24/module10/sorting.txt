// sorting.cpp

#include <vector>
#include <iostream>

using namespace std;

template <typename C>
void insertionSort(vector<C>& v)
{   
   for (int i = 1; i < v.size(); i++)
   {
        C temp = v[i];
        int j = i;
        while (j > 0 && v[j - 1] > temp) 
        {
          v[j] = v[j - 1];
          --j;
        }
        v[j] = temp;
    }
}

template <typename C>
void selectionSort(vector<C>& v)
{   
   for (int i = 0; i < v.size() - 1; i++)
   {
        int min = i;
        for (int j = i + 1; j < v.size(); j++) 
          if (v[j] < v[min]) 
            min = j;
        if (min != i) 
        {
          C temp = v[min];
          v[min] = v[i];
          v[i] = temp;
        }
   }
}

template <typename C>
void bubbleSort(vector<C>& v)
{
    for (int i = 0; i < v.size() - 1; i++)
    {
      for (int j = 0; j < v.size() - i - 1; j++)
        if (v[j] > v[j + 1])
        {
      	  C temp = v[j];
      	  v[j] = v[j + 1];
      	  v[j + 1] = temp;	
        }
    }
}

// MergeSort.cpp

#ifndef MERGESORT_H
#define MERGESORT_H

#include <vector>
using namespace std;

template <typename C>
void mergeSort( vector<C>& v );

template <typename C>
void mergeSort( vector<C>& v, vector<C>& tmp, int left, int right);

template <typename C>
void merge(vector<C>& v, vector<C>& tmp, int leftPos, int rightPos, int righEnd);

/**
 * Mergesort algorithm (driver).
 */
template <typename C>
void mergeSort( vector<C>& v )
{
  vector<C> tmp( v.size( ) );

  mergeSort( v, tmp, 0, v.size( ) - 1 );
}

/**
 * Internal method that makes recursive calls.
 * v is a vector of Comparable items.
 * tmp is a vector to place the merged result.
 * left is the left-most index of the subvector.
 * right is the right-most index of the subvector.
 */
template <typename C>
void mergeSort( vector<C>& v, vector<C>& tmp, int left, int right )
{
    if( left < right )
    {
      int center = ( left + right ) / 2;
        mergeSort( v, tmp, left, center );
        mergeSort( v, tmp, center + 1, right );
        merge( v, tmp, left, center + 1, right );
    }
}

/**
 * Internal method that merges two sorted halves of a subvector.
 * v is a vector of Comparable items.
 * tmp is a vector to place the merged result.
 * leftPos is the left-most index of the subvector.
 * rightPos is the index of the start of the second half.
 * rightEnd is the right-most index of the subvector.
 */
template <typename C>
void merge( vector<C>& v, vector<C>& tmp,
            int leftPos, int rightPos, int rightEnd )
{
    int leftEnd = rightPos - 1;
    int tmpPos = leftPos;
    int numElements = rightEnd - leftPos + 1;
    
    while( leftPos <= leftEnd && rightPos <= rightEnd )
        if( v[ leftPos ] <= v[ rightPos ] )
            tmp[ tmpPos++ ] =  v[ leftPos++ ];
        else
            tmp[ tmpPos++ ] =  v[ rightPos++ ];

    while( leftPos <= leftEnd )    // Copy rest of first half
        tmp[ tmpPos++ ] = v[ leftPos++ ];

    while( rightPos <= rightEnd )  // Copy rest of right half
        tmp[ tmpPos++ ] = v[ rightPos++ ];

    // Copy tmp back
    for( int i = 0; i < numElements; ++i, --rightEnd )
        v[ rightEnd ] = tmp[ rightEnd ];
}

#endif


// TestSort.cpp

#include <vector>
#include <iostream>
#include "sorting.cpp"
#include "MergeSort.cpp"

using namespace std;

template <typename C>
void print(vector<C> v)
{
	for(int i = 0; i < v.size(); i++)
		cout << v[i] << " ";
	cout << endl;
}

int main()
{
	vector<int> v, v1, v3;
	for (int i = 50; i>0; i--)
		v.push_back(i);
	insertionSort(v);
	print(v);

	for (int i = 50; i>0; i--)
		v1.push_back(i);
	selectionSort(v1);
	print(v1);
	 

	for (int i = 50; i>0; i--)
		v3.push_back(i);
	mergeSort(v3);
	print(v3); 


}
