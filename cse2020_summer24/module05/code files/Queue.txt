// CircularQueue.cpp

#ifndef QUEUE_H
#define QUEUE_H
#include <iostream>
using namespace std;

template <typename T>
class Queue 
{
public:
  // Constructor
  Queue(int capacity = CAPACITY)
  {
  	this->capacity = capacity;
  	items = new T[capacity];
  	front = 0;
  	back = 0;
  }
  
  //Desctructor
  ~Queue()
  {
  	delete [] items;
  }  

  // Makes the queue to the empty state.  
  void clear()
  {
  	front = 0;
  	back = 0;
  }
  
  // Checks if the queue is empty.  
  bool empty() const
  {
  	return (front == back);
  }

  // Checks if the queue is full.  
  bool full() const
  {
  	return (((back + 1) % capacity) == front);
  }
  
  // Inserts item at the end of the queue.
  void enqueue(const T& item)
  {
  	if(!full())
  	{
  	  	back = (back + 1) % capacity;
  	  	items[back] = item;	
  	}
  }

  // Removes the element at the start of the queue.
  void dequeue()
  {
  	if(!empty())
  	{
  	  	front = (front + 1) % capacity;
  	}
  }
	
	// returns the front element
  const T& front_element() const
  {
  	return items[(front + 1) % capacity];
  }
  
  // Prints the elements of the queue.
  void print() const
  {
  	int i = (front + 1) % capacity;
  	while (i <= back)
  	{
  	  	cout << items[i] << ",";
  	  	i = (i + 1) % capacity;
  	}
  	cout << endl;
  }  

const static int CAPACITY = 50;
  
private: 
  	T* items;
  	int capacity;
  	int front;
  	int back;
};

#endif


// LinkedQueue.cpp

#ifndef QUEUE_H
#define QUEUE_H

#include <iostream>
using namespace std;

template <typename T>
class Queue 
{
public:
  // Constructor
  Queue()
  {
	  front = nullptr;
	  back = nullptr;
  }
  
  //Desctructor
  ~Queue()
  {
	  clear();
  }  

  // Makes the queue to the empty state.  
  void clear()
  {
	  while (!empty())
	  {
		  dequeue();
	  }
  }
  
  // Checks if the queue is empty.  
  bool empty() const
  {
	  return (front == nullptr && back == nullptr);
  }
  
  // Inserts item at the end of the queue.
  void enqueue(const T& item)
  {
	  NodeType* new_node = new NodeType(item);
	  
	  if (empty())
	  {
	  	// add the first element 
	  	front = new_node;
	  	back = new_node;
	  }
	  else
	  {
	  	back->next = new_node;
	  	back = new_node;
	  }
  }

  // Removes the element at the start of the queue.
  void dequeue()
  {
	  if (!empty())
	  {
	  	NodeType* ptr = front;
	  	front = front->next;
	  	delete ptr;	
	  	// dequeue the last element
	  	if (front == nullptr)
	  		back = nullptr;
	  }
  }
	
	// returns the front element
  const T& front_element() const
  {
	  return front->data; 
  }
  
  // Prints the elements of the queue.
  void print() const
  {
	  NodeType* ptr = front;
	  while (ptr != nullptr)
	  {
		  cout << ptr->data << ", ";
		  ptr = ptr->next;
	  }
	  cout << endl;
  }  
  
private:
  struct NodeType
  {
        T data;
        NodeType* next;
	  
        NodeType(const T & d = T()): data(d), next(nullptr)
        { }	  
  };
  
  NodeType* front;
  NodeType* back;
};

#endif


// DoublyLinkedQueue.cpp

#ifndef QUEUE_H
#define QUEUE_H

#include <iostream>
using namespace std;

template <typename T>
class Queue 
{
public:
  // Constructor
  Queue()
  {
	  front = new NodeType;	
	  back = new NodeType;		  
	  front->next = back;
	  back->prev = front;
  }
  
  //Desctructor
  ~Queue()
  {
	  clear();
	  delete front;  	
	  delete back;  	
  }  

  // Makes the queue to the empty state.  
  void clear()
  {

  }
  
  // Checks if the queue is empty.  
  bool empty() const
  {
	 
  }
  
  // Inserts item at the end of the queue.
  void enqueue(const T& item)
  {

  }

  // Removes the element at the start of the queue.
  void dequeue()
  {
	  NodeType* ptr = front->next;
	  if (!empty())
	  {

	  }
  }
	
	// returns the front element
  const T& front_element() const
  {
 
  }
  
  // Prints the elements of the queue.
  void print() const
  {
	  NodeType* ptr = front->next;
	  while (ptr != back)
	  {
		  cout << ptr->data << ", ";
		  ptr = ptr->next;
	  }
	  cout << endl;
  }  
  
private:
  struct NodeType
  {
	  T data;
	  NodeType* next;
	  NodeType* prev;
	  
	  NodeType(const T & d = T()): data(d), prev(nullptr), next(nullptr)
	  {}
  };
  
  NodeType* front;
  NodeType* back;
};

#endif


// TestQueue.cpp

#include <string>
#include "Employee.cpp"

// Application of circular queue
#include "CircularQueue.cpp"
// Application of singly linked queue
//#include "LinkedQueue.cpp" 
// Application of doubly linked queue
//#include "DoublyLinkedQueue.cpp"


int main() 
{ 
	Queue<int> intQue;

	int x = 0, k = 0;

	cout << "Enqueue positive numbers (enter -1 to stop): ";
	cin >> x;
	while (x != -1)
	{  
		intQue.enqueue(x);
		cin >> x;		
	}
	cout << endl<< "print queue: ";
	intQue.print(); 

	cout << "How many numbers to be removed from queue: ";
	cin >> k;
	cout << endl;
	for (int i = 0; i < k; i++)
	{
		intQue.dequeue();
	}
	cout << endl << "print queue: ";
	intQue.print();
	
	
	Queue<string> stringQue;

	string s;

	cout << "Enqueue string (enter exit to stop): ";
	cin >> s;
	while (s != "exit")
	{  
		stringQue.enqueue(s);
		cin >> s;		
	}
	cout << endl<< "print queue: ";
	stringQue.print(); 
	
	cout << "How many strings to be removed from queue: ";
	cin >> k;
	
	for (int i = 1; i <= k; i++)
	{
		stringQue.dequeue();
	}
	cout << endl << "print queue: ";
	stringQue.print(); 



	Queue<Employee> emplQue;

	string name, dept;
	int id = 0;

	cout << "Enqueue employee id, name, dept(enter id 0 to stop): ";
	cin >> id >> name >> dept;
	while (id != 0)
	{  
		Employee e(id, name, dept);
		emplQue.enqueue(e);
		cout << "Enqueue employee id, name, dept(enter id 0 to stop): ";
		cin >> id >> name >> dept;		
	}
	cout << endl<< "print queue: ";
	emplQue.print(); 
	
	cout << "How many employees to be removed from queue: ";
	cin >> k;
	
	for (int i = 1; i <= k; i++)
	{
		emplQue.dequeue();
	}
	cout << endl << "print queue: ";
	emplQue.print(); 


  	
	return 0;
}

