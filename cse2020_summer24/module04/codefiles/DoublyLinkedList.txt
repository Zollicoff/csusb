// DoublyLinkedList.cpp

#ifndef DLL
#define DLL

template <typename T>
class DoublyLinkedList 
{
private:
  struct NodeType
  {
    T data;
    NodeType* prev;
    NodeType* next;
      
    NodeType(): data(), prev(nullptr), next(nullptr)
    {}
    
    NodeType(const T& d): data(d), prev(nullptr), next(nullptr)
    {}
  };
    
public:
  // Default constructor
  DoublyLinkedList():size(0)
  {
	head = new NodeType;	
	tail = new NodeType;	
	head->next = tail;
	tail->prev = head;
  }
  
  ~DoublyLinkedList()
  {
	clear();
	delete head;
	delete tail;
  }
  
  bool empty( ) const
  {
	return get_size() == 0; 
  } 
  

  // Returns the list to the empty state.  
  void clear()
  {
	while (!empty())
	{
		pop_front();
	}
  }
  
  // Determines the number of items in list.
  int get_size() const
  {
	return size;
  }

  // Checks if item is in the list. 
  bool find(const T& item) const
  {
	NodeType* ptr = head->next;
	while (ptr->data != item && ptr != tail)
	{
		ptr = ptr->next;
	}
	if (ptr->data == item)
		return true;
	else
		return false;
  }

  // Insert item at the front.
  void push_front(const T& item)
  {
	NodeType* ptr = new NodeType(item);
		
	ptr->prev = head;
	ptr->next = head->next;
	head->next = ptr;	
	ptr->next->prev = ptr;
		
	++size;
  }
  
  // Removes the first item.
  void pop_front()
  {
	if (!empty())
	{
		NodeType* ptr = head->next;
	  	head->next = ptr->next;
	  	ptr->next->prev = ptr->prev;
	  	delete ptr;
	  	--size;
	}
  }
  
  // Inserts item at the back.
  void push_back(const T& item)
  {
	NodeType* ptr = new NodeType(item);

	ptr->prev = tail->prev;
	ptr->next = tail;
	tail->prev->next = ptr; 
	tail->prev = ptr;
	
	++size;
  } 
  
  // Removes the last item.
  void pop_back()
  {
	if (!empty())
	{
		NodeType* ptr = tail->prev;
		ptr->prev->next = tail;
		tail->prev = ptr->prev;
		
		delete ptr;
		--size;
	}
  }

    
public:
  class iterator
  {
    public:

      // Public constructor for iterator.
      iterator( )
      {
          current = nullptr;
      }

      T & operator* ( )
      {
          return current->data;
      }
      
      iterator & operator++ ( )
      {
          current = current->next;
          return *this;
      }

      iterator & operator-- ( )
      {
          current = current->prev;
          return *this;
      }

      bool operator== ( const iterator & rhs ) const
      {
          return current == rhs.current;
      }

      bool operator!= ( const iterator & rhs ) const
      {
          return !( *this == rhs );
      }

    protected:
      NodeType* current;

      iterator( NodeType* p )
      {
          current = p;
      }
      
    friend class DoublyLinkedList<T>;
  };
  
  iterator begin( )
  {
      return iterator( head->next );
  }

  iterator end( )
  {
      return iterator( tail );
  }

private:
  int size;
  NodeType* head;
  NodeType* tail;

};

#endif


// TestDoublyLinkedList.cpp

#include <iostream>
#include <string>

#include "DoublyLinkedList.cpp"
#include "Employee.cpp"

using namespace std;

template <typename C>
void print(DoublyLinkedList<C> &l)
{
    for (typename DoublyLinkedList<C>::iterator itr = l.begin(); itr != l.end(); ++itr)
         cout << *itr << ",";
}

int main()
{
	DoublyLinkedList<int> intdll;
	for (int i = 0; i < 5; i++)
		intdll.push_front(i);

	for (int i = 0; i < 5; i++)
		intdll.push_back(i * 10);
        cout << "the size of the int doubly linked list is " << intdll.get_size() << endl;	
	print(intdll);
	
	cout << "remove 2 elements from the front and back"<< endl;	
	for (int i = 0; i < 2; i++)
	{
		intdll.pop_front();
		intdll.pop_back();
	}
	print(intdll);
	cout << endl;
	
	
	string s;
	DoublyLinkedList<string> strdll;
	cout << "Input 5 strings in the string doubly linked list from both ends: "<< endl;
	for (int i = 0; i < 5; i++)
	{
		cin >> s;
		strdll.push_front(s);	
		strdll.push_back(s);
	}
	print(strdll);

	cout << "Search if a string is in the string doubly linked list: ";
	cin >> s;
	cout << "Is "<< s <<" in the list? " << strdll.find(s) << endl;	

	DoublyLinkedList<Employee> empldll;
	string name, dept;
	int id = 0;
	cout << "Input id, name, and department name (stop adding when entering id 0): ";
	cin >> id >> name >> dept;
	while (id != 0 )
	{
		Employee e(id, name, dept);
		empldll.push_front(e);
		cout << "Input name, id, and department name (stop adding when entering id 0): ";
		cin >> id >> name >> dept;
	}
	cout << "the size of the employee linked list is " << empldll.get_size() << endl;
	print(empldll);

	cout << "Search if an employee is in the employee doubly linked list, enter id, name, and dept name: ";
	cin >> id >> name >> dept;
	Employee se(id, name, dept);
	cout << "Is ( "<< se << " ) in the list? " << empldll.find(se) << endl;	

	return 0;
}
